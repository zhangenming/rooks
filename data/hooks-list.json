{
  "hooks": [
    {
      "name": "useArrayState",
      "description": "Array state manager hook for React",
      "category": "state"
    },
    {
      "name": "useAsyncEffect",
      "description": "A version of useEffect that accepts an async function",
      "category": "lifecycle"
    },
    {
      "name": "useAudio",
      "description": "Audio hook",
      "category": "ui"
    },
    {
      "name": "useBoundingclientrect",
      "description": "getBoundingClientRect hook for React.",
      "category": "ui"
    },
    {
      "name": "useBoundingclientrectRef",
      "description": "A hook that tracks the boundingclientrect of an element. It returns a callbackRef so that the element node if changed is easily tracked.",
      "category": "ui"
    },
    {
      "name": "useCountdown",
      "description": "Count down to a target timestamp and call callbacks every second (or provided peried)",
      "category": "state"
    },
    {
      "name": "useCounter",
      "description": "Counter hook for React.",
      "category": "state"
    },
    {
      "name": "useDebounce",
      "description": "Debounce hook for react",
      "category": "performance"
    },
    {
      "name": "useDebouncedValue",
      "description": "Tracks another value and gets updated in a debounced way.",
      "category": "performance"
    },
    {
      "name": "useDebounceFn",
      "description": "Powerful debounce function hook for React",
      "category": "performance"
    },
    {
      "name": "useDeepCompareEffect",
      "description": "Deep compare dependencies instead of shallow for useEffect",
      "category": "lifecycle"
    },
    {
      "name": "useDidMount",
      "description": "componentDidMount hook for React",
      "category": "lifecycle"
    },
    {
      "name": "useDidUpdate",
      "description": "componentDidUpdate hook for react",
      "category": "lifecycle"
    },
    {
      "name": "useDimensionsRef",
      "description": "Easily grab dimensions of an element with a ref using this hook",
      "category": "ui"
    },
    {
      "name": "useDocumentEventListener",
      "description": "A react hook to an event listener to the document object",
      "category": "events"
    },
    {
      "name": "useDocumentTitle",
      "description": "A hook to easily update document title with React",
      "category": "lifecycle"
    },
    {
      "name": "useDocumentVisibilityState",
      "description": "Returns the visibility state of the document.",
      "category": "events"
    },
    {
      "name": "useEffectOnceWhen",
      "description": "Runs a callback effect atmost one time when a condition becomes true",
      "category": "lifecycle"
    },
    {
      "name": "useEventListenerRef",
      "description": "A react hook to add an event listener to a ref",
      "category": "utilities"
    },
    {
      "name": "useFileDropRef",
      "description": "Drop files easily",
      "category": "form"
    },
    {
      "name": "useFocus",
      "description": "Handles focus events for the immediate target element.",
      "category": "events"
    },
    {
      "name": "useFocusWithin",
      "description": "Handles focus events for the target component.",
      "category": "events"
    },
    {
      "name": "useForkRef",
      "description": "A hook that can combine two refs(mutable or callbackRefs) into a single callbackRef",
      "category": "utilities"
    },
    {
      "name": "useFreshCallback",
      "description": "Avoid stale closures and keep your callback fresh",
      "category": "utilities"
    },
    {
      "name": "useFreshRef",
      "description": "Avoid stale state in callbacks with this hook. Auto updates values using a ref.",
      "category": "utilities"
    },
    {
      "name": "useFreshTick",
      "description": "Like use-fresh-ref but specifically for functions",
      "category": "utilities"
    },
    {
      "name": "useFullscreen",
      "description": "Use full screen api for making beautiful and emersive experinces.",
      "category": "ui"
    },
    {
      "name": "useGeolocation",
      "description": "A hook to provide the geolocation info on client side.",
      "category": "browser"
    },
    {
      "name": "useGetIsMounted",
      "description": "Checks if a component is mounted or not at the time. Useful for async effects",
      "category": "state"
    },
    {
      "name": "useIdleDetectionApi",
      "description": "Hook to detect when user is idle using Idle Detection API with polyfill",
      "category": "browser"
    },
    {
      "name": "useInput",
      "description": "Input hook for React.",
      "category": "keyboard"
    },
    {
      "name": "useIntersectionObserverRef",
      "description": "A hook to register an intersection observer listener.",
      "category": "ui"
    },
    {
      "name": "useIntervalWhen",
      "description": "Sets an interval immediately when a condition is true",
      "category": "animation"
    },
    {
      "name": "useInViewRef",
      "description": "Simple hook that monitors element enters or leave the viewport that's using Intersection Observer API. ",
      "category": "ui"
    },
    {
      "name": "useIsDroppingFiles",
      "description": "Check if any files are currently being dropped anywhere. Useful for highlighting drop areas. ",
      "category": "events"
    },
    {
      "name": "useIsomorphicEffect",
      "description": "A hook that resolves to useEffect on the server and useLayoutEffect on the client.",
      "category": "lifecycle"
    },
    {
      "name": "useKey",
      "description": "keypress, keyup and keydown event handlers as hooks for react.",
      "category": "keyboard"
    },
    {
      "name": "useKeyBindings",
      "description": "useKeyBindings can bind multiple keys to multiple callbacks and fire the callbacks on key press.",
      "category": "keyboard"
    },
    {
      "name": "useKeyRef",
      "description": "Very similar useKey but it returns a ref",
      "category": "keyboard"
    },
    {
      "name": "useKeys",
      "description": "A hook which allows to setup callbacks when a combination of keys are pressed at the same time.",
      "category": "keyboard"
    },
    {
      "name": "useLifecycleLogger",
      "description": "A react hook that console logs parameters as component transitions through lifecycles.",
      "category": "lifecycle"
    },
    {
      "name": "useLocalstorageState",
      "description": "UseState but auto updates values to localStorage",
      "category": "state"
    },
    {
      "name": "useLockBodyScroll",
      "description": "This hook locks the scroll of the body element when `isLocked` is set to `true`.",
      "category": "animation"
    },
    {
      "name": "useMapState",
      "description": "A react hook to manage state in a key value pair map.",
      "category": "state"
    },
    {
      "name": "useMediaMatch",
      "description": "Signal whether or not a media query is currently matched.",
      "category": "ui"
    },
    {
      "name": "useMergeRefs",
      "description": "Merges any number of refs into a single ref",
      "category": "utilities"
    },
    {
      "name": "useMouse",
      "description": "Mouse position hook for React.",
      "category": "mouse"
    },
    {
      "name": "useMouseMoveDelta",
      "description": "Tracks delta of mouse move",
      "category": "mouse"
    },
    {
      "name": "useMouseWheelDelta",
      "description": "Tracks delta of mouse move",
      "category": "mouse"
    },
    {
      "name": "useMultiSelectableList",
      "description": "A custom hook to easily select multiple values from a list",
      "category": "state"
    },
    {
      "name": "useMutationObserver",
      "description": "Mutation Observer hook for React.",
      "category": "ui"
    },
    {
      "name": "useMutationObserverRef",
      "description": "A hook that tracks mutations of an element. It returns a callbackRef.",
      "category": "ui"
    },
    {
      "name": "useNativeMapState",
      "description": "Manage Map() object state in React",
      "category": "state"
    },
    {
      "name": "useNavigatorLanguage",
      "description": "Navigator Language hook for React.",
      "category": "browser"
    },
    {
      "name": "useOnClickRef",
      "description": "Callback on click/tap events",
      "category": "events"
    },
    {
      "name": "useOnHoverRef",
      "description": "On hover callback hook",
      "category": "events"
    },
    {
      "name": "useOnline",
      "description": "Online status hook for React.",
      "category": "browser"
    },
    {
      "name": "useOnLongHover",
      "description": "Fires a callback when an element is hovered for a while",
      "category": "events"
    },
    {
      "name": "useOnLongPress",
      "description": "Fire a callback on long press",
      "category": "events"
    },
    {
      "name": "useOnWindowResize",
      "description": "A React hook for adding an event listener for window resize",
      "category": "events"
    },
    {
      "name": "useOnWindowScroll",
      "description": "A React hook for adding an event listener for window scroll",
      "category": "events"
    },
    {
      "name": "useOrientation",
      "description": "orientation hook for react",
      "category": "browser"
    },
    {
      "name": "useOutsideClick",
      "description": "Outside click(for a ref) event as hook for React.",
      "category": "events"
    },
    {
      "name": "useOutsideClickRef",
      "description": "A hook that can track a click event outside a ref. Returns a callbackRef.",
      "category": "events"
    },
    {
      "name": "usePictureInPictureApi",
      "description": "Hook for managing Picture-in-Picture video functionality",
      "category": "ui"
    },
    {
      "name": "usePreviousDifferent",
      "description": "usePreviousDifferent returns the last different value of a variable",
      "category": "state"
    },
    {
      "name": "usePreviousImmediate",
      "description": "usePreviousImmediate returns the previous value of a variable even if it was the same or different",
      "category": "state"
    },
    {
      "name": "usePromise",
      "description": "Promise management hook for react",
      "category": "state"
    },
    {
      "name": "useQueueState",
      "description": "A React hook that manages state in the form of a queue",
      "category": "state"
    },
    {
      "name": "useRaf",
      "description": "A continuously running requestAnimationFrame hook for React",
      "category": "animation"
    },
    {
      "name": "useRefElement",
      "description": "Helps bridge gap between callback ref and state",
      "category": "utilities"
    },
    {
      "name": "useRenderCount",
      "description": "Get the render count of a component",
      "category": "dev"
    },
    {
      "name": "useResizeObserverRef",
      "description": "Resize Observer hook for React.",
      "category": "animation"
    },
    {
      "name": "useSafeSetState",
      "description": "set state but ignores if component has already unmounted",
      "category": "state"
    },
    {
      "name": "useScreenDetailsApi",
      "description": "Hook for multi-screen information and management using Screen Details API",
      "category": "browser"
    },
    {
      "name": "useSelect",
      "description": "Select values from a list easily. List selection hook for react.",
      "category": "state"
    },
    {
      "name": "useSelectableList",
      "description": "Easily select a single value from a list of values. very useful for radio buttons, select inputs  etc.",
      "category": "state"
    },
    {
      "name": "useSessionstorageState",
      "description": "useState but syncs with sessionstorage",
      "category": "state"
    },
    {
      "name": "useSetState",
      "description": "Manage the state of a Set in React. ",
      "category": "state"
    },
    {
      "name": "useSpeech",
      "description": "Speech synthesis hook for React",
      "category": "browser"
    },
    {
      "name": "useStackState",
      "description": "A React hook that manages state in the form of a stack",
      "category": "state"
    },
    {
      "name": "useThrottle",
      "description": "Throttle custom hook for React",
      "category": "performance"
    },
    {
      "name": "useTimeoutWhen",
      "description": "Takes a callback and fires it when a condition is true",
      "category": "animation"
    },
    {
      "name": "useTimeTravelState",
      "description": "A hook that manages state which can undo and redo. A more powerful version of useUndoState hook.",
      "category": "state-history"
    },
    {
      "name": "useToggle",
      "description": "Toggle (between booleans or custom data)hook for React.",
      "category": "state-history"
    },
    {
      "name": "useUndoRedoState",
      "description": "Setstate but can also undo and redo ",
      "category": "state-history"
    },
    {
      "name": "useUndoState",
      "description": "Drop in replacement for useState hook but with undo functionality.",
      "category": "state-history"
    },
    {
      "name": "useVibrate",
      "description": "Vibration API hook for React",
      "category": "browser"
    },
    {
      "name": "useVideo",
      "description": "Video hook for react",
      "category": "ui"
    },
    {
      "name": "useWebLocksApi",
      "description": "Hook for coordinating operations across tabs/workers with Web Locks API",
      "category": "browser"
    },
    {
      "name": "useWhyDidYouUpdate",
      "description": "A hook that can track which value change caused a rerender",
      "category": "dev"
    },
    {
      "name": "useWillUnmount",
      "description": "componentWillUnmount lifecycle as hook for React.",
      "category": "lifecycle"
    },
    {
      "name": "useWindowEventListener",
      "description": "Adds an event listener to window",
      "category": "events"
    },
    {
      "name": "useWindowScrollPosition",
      "description": "A React hook to get the scroll position of the window",
      "category": "viewport"
    },
    {
      "name": "useWindowSize",
      "description": "Window size hook for React.",
      "category": "viewport"
    }
  ]
}